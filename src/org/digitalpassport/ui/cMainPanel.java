
package org.digitalpassport.ui;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.digitalpassport.OSTKitAlpha;
import org.digitalpassport.api.commands.cTransactionManagement;
import org.digitalpassport.api.commands.cUserManagement;
import org.digitalpassport.deserialize.json.cError;
import org.digitalpassport.deserialize.json.cErrorData;
import org.digitalpassport.deserialize.json.cResponse;
import org.digitalpassport.deserialize.json.users.lists.cEconomyUserJson;
import org.digitalpassport.deserialize.json.users.lists.cListUsersJson;

/**
 *
 * @author Philip M. Trenwith
 */
public class cMainPanel extends javax.swing.JPanel
{
  private cUserManagement m_oUserManagement = new cUserManagement();
  private cTransactionManagement m_oTransactionManagement = new cTransactionManagement();
  private int m_iMaxPageNumber = 2;
  private cTableModel m_oTableModel;
  
  class cTableModel extends DefaultTableModel
  {

    public cTableModel()
    {
      super();
    }

    @Override
    public boolean isCellEditable(int row, int column)
    {
      return getColumnName(column).equals("Name");
    }
  }
  
  /**
   * Creates new form cMainPanel
   */
  public cMainPanel()
  {
	initComponents();
	spnPage.setValue(1);
	spnPage.addChangeListener(new ChangeListener() {
	  @Override
	  public void stateChanged(ChangeEvent e)
	  {
        try
        {
          int iPage = Integer.parseInt(spnPage.getValue()+"");
          loadUsers();
        }
        catch (Exception ex)
        {
          System.err.println("Invalid page: " + ex.getMessage());
        }
	  }
	});
    
    spnAirdropAmount.setModel(new SpinnerNumberModel(10,1,Integer.MAX_VALUE,1));
    
    m_oTableModel = new cTableModel();
    TableModel model = oUserTable.getModel();
    int iColumnCount = model.getColumnCount();
    for (int i=0; i<iColumnCount; i++)
    {
      m_oTableModel.addColumn(model.getColumnName(i));
    }
    oUserTable.setModel(m_oTableModel);
    
    oUserTable.addPropertyChangeListener(new PropertyChangeListener() 
    {
      @Override
      public void propertyChange(PropertyChangeEvent evt) {
          if ("tableCellEditor".equals(evt.getPropertyName())) 
          {
            if (evt.getNewValue() == null)
            {
              int iRow = oUserTable.getSelectedRow();
              int iCol = oUserTable.getSelectedColumn();
              int iUUIDIndex = getColumnIndexByHeading("UUID");
              String sUUID = oUserTable.getValueAt(iRow, iUUIDIndex)+"";
              String sNewName = oUserTable.getValueAt(iRow, iCol)+"";
              System.out.println("User name changed: " + sUUID + " -> " + sNewName);
              cResponse oResponse = m_oUserManagement.editUser(sUUID, sNewName);
              
              if (oResponse != null && !oResponse.getsuccess())
              {
                JOptionPane.showMessageDialog(oUserTable, "Failed to edit user with UUID: " + 
                        sUUID + "\nCode: " + oResponse.geterr().getcode() + 
                        "\nMessage: " + oResponse.geterr().getmsg());
              }
            }
          }
      }
    });
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   * content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    oMainTabPane = new javax.swing.JTabbedPane();
    oUsersTabScrollTab = new javax.swing.JScrollPane();
    oUsersPanel = new javax.swing.JPanel();
    jLabel3 = new javax.swing.JLabel();
    cmbFilter = new javax.swing.JComboBox<>();
    jLabel2 = new javax.swing.JLabel();
    cmbOrderBy = new javax.swing.JComboBox<>();
    cmbOrder = new javax.swing.JComboBox<>();
    jLabel1 = new javax.swing.JLabel();
    spnPage = new javax.swing.JSpinner();
    btnListUsers = new javax.swing.JButton();
    jScrollPane2 = new javax.swing.JScrollPane();
    oUserTable = new javax.swing.JTable();
    jLabel4 = new javax.swing.JLabel();
    txtName = new javax.swing.JTextField();
    btnCreateUser = new javax.swing.JButton();
    jLabel5 = new javax.swing.JLabel();
    cmbAirdropTo = new javax.swing.JComboBox<>();
    btnAirdrop = new javax.swing.JButton();
    spnAirdropAmount = new javax.swing.JSpinner();
    jLabel6 = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();

    jLabel3.setText("Filter:");

    cmbFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "all", "never_airdropped" }));
    cmbFilter.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cmbFilterActionPerformed(evt);
      }
    });

    jLabel2.setText("Order By:");

    cmbOrderBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "name", "creation_time" }));
    cmbOrderBy.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cmbOrderByActionPerformed(evt);
      }
    });

    cmbOrder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "asc", "desc" }));
    cmbOrder.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cmbOrderActionPerformed(evt);
      }
    });

    jLabel1.setText("Page:");

    btnListUsers.setText("Get Users");
    btnListUsers.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btnListUsersActionPerformed(evt);
      }
    });

    oUserTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Name", "Tokens", "Airdropped Tokens", "UUID"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    jScrollPane2.setViewportView(oUserTable);

    jLabel4.setText("Name:");

    btnCreateUser.setText("Create User");
    btnCreateUser.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btnCreateUserActionPerformed(evt);
      }
    });

    jLabel5.setText("Airdrop tokens to users:");

    cmbAirdropTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "all", "never airdropped" }));

    btnAirdrop.setText("Airdrop");
    btnAirdrop.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btnAirdropActionPerformed(evt);
      }
    });

    jLabel6.setText("Amount:");

    javax.swing.GroupLayout oUsersPanelLayout = new javax.swing.GroupLayout(oUsersPanel);
    oUsersPanel.setLayout(oUsersPanelLayout);
    oUsersPanelLayout.setHorizontalGroup(
      oUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(oUsersPanelLayout.createSequentialGroup()
        .addGroup(oUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane2)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, oUsersPanelLayout.createSequentialGroup()
            .addGap(0, 120, Short.MAX_VALUE)
            .addComponent(jLabel3)
            .addGap(18, 18, 18)
            .addComponent(cmbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(10, 10, 10)
            .addComponent(jLabel2)
            .addGap(18, 18, 18)
            .addComponent(cmbOrderBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(6, 6, 6)
            .addComponent(cmbOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jLabel1)
            .addGap(18, 18, 18)
            .addComponent(spnPage, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(btnListUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, oUsersPanelLayout.createSequentialGroup()
            .addGroup(oUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addGroup(oUsersPanelLayout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbAirdropTo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spnAirdropAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addGroup(oUsersPanelLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtName)))
            .addGap(18, 18, 18)
            .addGroup(oUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(btnCreateUser, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
              .addComponent(btnAirdrop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        .addContainerGap())
    );
    oUsersPanelLayout.setVerticalGroup(
      oUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(oUsersPanelLayout.createSequentialGroup()
        .addGap(11, 11, 11)
        .addGroup(oUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(oUsersPanelLayout.createSequentialGroup()
            .addGap(4, 4, 4)
            .addComponent(jLabel3))
          .addGroup(oUsersPanelLayout.createSequentialGroup()
            .addGap(1, 1, 1)
            .addComponent(cmbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(oUsersPanelLayout.createSequentialGroup()
            .addGap(4, 4, 4)
            .addComponent(jLabel2))
          .addGroup(oUsersPanelLayout.createSequentialGroup()
            .addGap(1, 1, 1)
            .addComponent(cmbOrderBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(oUsersPanelLayout.createSequentialGroup()
            .addGap(1, 1, 1)
            .addComponent(cmbOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(oUsersPanelLayout.createSequentialGroup()
            .addGap(4, 4, 4)
            .addComponent(jLabel1))
          .addGroup(oUsersPanelLayout.createSequentialGroup()
            .addGap(1, 1, 1)
            .addComponent(spnPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(btnListUsers))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(oUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnCreateUser)
          .addComponent(jLabel4))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(oUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel5)
          .addComponent(cmbAirdropTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnAirdrop)
          .addComponent(spnAirdropAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel6))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    oUsersTabScrollTab.setViewportView(oUsersPanel);

    oMainTabPane.addTab("Users", oUsersTabScrollTab);
    oMainTabPane.addTab("Transactions", jScrollPane1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(oMainTabPane)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(oMainTabPane)
    );
  }// </editor-fold>//GEN-END:initComponents

    private void cmbFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFilterActionPerformed
	  spnPage.setValue(1);
    }//GEN-LAST:event_cmbFilterActionPerformed

    private void cmbOrderByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrderByActionPerformed
	  spnPage.setValue(1);
    }//GEN-LAST:event_cmbOrderByActionPerformed

    private void cmbOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrderActionPerformed
	  spnPage.setValue(1);
    }//GEN-LAST:event_cmbOrderActionPerformed

    private void btnListUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListUsersActionPerformed
	  loadUsers();
    }//GEN-LAST:event_btnListUsersActionPerformed

    private void btnCreateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateUserActionPerformed
	  btnCreateUser.setText("Please wait...");
	  btnCreateUser.setEnabled(false);
	  new Thread(new Runnable()
	  {
		@Override
		public void run()
		{
		  cResponse oResponse = m_oUserManagement.createUser(txtName.getText());

		  if (oResponse != null && !oResponse.getsuccess())
		  {
			String sErrorMsg = "";
			cError oError = oResponse.geterr();
			if (oError != null)
			{
			  cErrorData[] error_data = oError.geterror_data();
			  if (error_data != null)
			  {
				for (cErrorData oErr : error_data)
				{
				  sErrorMsg += oErr.getname() + "\n";
				}
			  }
			  showError(oResponse.geterr(), "Failed to create user: " + sErrorMsg);
			}
			else
			{
			  showError(oResponse.geterr(), "Failed to create user");
			}
		  }
		  else
		  {
			loadUsers();
		  }

		  btnCreateUser.setText("Get Users");
		  btnCreateUser.setEnabled(true);
		}
	  }).start();
    }//GEN-LAST:event_btnCreateUserActionPerformed

  private void btnAirdropActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAirdropActionPerformed
  {//GEN-HEADEREND:event_btnAirdropActionPerformed
    new Thread(new Runnable() 
    {
      @Override
      public void run()
      {
        String sAirdropTo = (cmbAirdropTo.getSelectedItem()+"").replace(" ", "_");
        cResponse oResponse = m_oUserManagement.sendAirdropTo(sAirdropTo, Integer.parseInt(spnAirdropAmount.getValue()+""));
        if (oResponse.getsuccess())
		{
          loadUsers();
        }
		else
		{
		  showError(oResponse.geterr(), "Failed to retrieve users");
		}
      }
    }).start();
  }//GEN-LAST:event_btnAirdropActionPerformed

  public void loadUsers()
  {
	btnListUsers.setText("Please wait...");
	btnListUsers.setEnabled(false);
	new Thread(new Runnable()
	{
	  @Override
	  public void run()
	  {
		clearUsersTable();

		String sOrderBy = cmbOrderBy.getSelectedItem() + "";
		String sOrder = cmbOrder.getSelectedItem() + "";
		String sFilter = cmbFilter.getSelectedItem() + "";
		String sPage = spnPage.getValue() + "";

		cResponse oResponse = m_oUserManagement.listUsers(sPage, sFilter, sOrderBy, sOrder);

		if (oResponse.getsuccess())
		{
		  cListUsersJson oUserData = oResponse.getdata();
		  cEconomyUserJson[] lsUsers = oUserData.geteconomy_users();

		  String sPage_no = oUserData.getmeta().getoNextPagePayload().getPage_no();
		  if (sPage_no != null)
		  {
			int iPage = Integer.parseInt(sPage);
			int iNextPage = Integer.parseInt(sPage_no);
			if (iNextPage > m_iMaxPageNumber)
			{
			  m_iMaxPageNumber = iNextPage;
			  spnPage.setModel(new SpinnerNumberModel(iPage, 1, m_iMaxPageNumber, 1));
			}
		  }

		  DefaultTableModel oUserModel = (DefaultTableModel) oUserTable.getModel();
		  for (cEconomyUserJson oUser : lsUsers)
		  {
			Vector<Object> vRow = new Vector<Object>();
			int iRowNumber = oUserModel.getRowCount();
			oUserModel.addRow(vRow);

			oUserModel.setValueAt(oUser.getName(), iRowNumber, getColumnIndexByHeading("Name"));
			oUserModel.setValueAt(oUser.getToken_balance(), iRowNumber, getColumnIndexByHeading("Tokens"));
			oUserModel.setValueAt(oUser.getTotal_airdropped_tokens(), iRowNumber, getColumnIndexByHeading("Airdropped Tokens"));
			oUserModel.setValueAt(oUser.getUuid(), iRowNumber, getColumnIndexByHeading("UUID"));
		  }
		}
		else
		{
		  showError(oResponse.geterr(), "Failed to retrieve users");
		}
		btnListUsers.setText("Get Users");
		btnListUsers.setEnabled(true);
	  }
	}).start();
  }

  public void clearUsersTable()
  {
	DefaultTableModel dm = (DefaultTableModel) oUserTable.getModel();
	int rowCount = dm.getRowCount();
	//Remove rows one by one from the end of the table
	for (int i = rowCount - 1; i >= 0; i--)
	{
	  dm.removeRow(i);
	}
	oUserTable.repaint();
  }

  public int getColumnIndexByHeading(String _sColumnHeading)
  {
	DefaultTableModel oUserModel = (DefaultTableModel) oUserTable.getModel();
	for (int iCol = 0; iCol < oUserModel.getColumnCount(); iCol++)
	{
	  if (oUserModel.getColumnName(iCol).equals(_sColumnHeading))
	  {
		return iCol;
	  }
	}
	return -1;
  }

  private void showError(cError oError, String sMessage)
  {
	JOptionPane.showMessageDialog(OSTKitAlpha.oFrame, sMessage
			+ "\nCode: " + oError.getcode()
			+ "\nMessage: " + oError.getmsg());
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnAirdrop;
  private javax.swing.JButton btnCreateUser;
  private javax.swing.JButton btnListUsers;
  private javax.swing.JComboBox<String> cmbAirdropTo;
  private javax.swing.JComboBox<String> cmbFilter;
  private javax.swing.JComboBox<String> cmbOrder;
  private javax.swing.JComboBox<String> cmbOrderBy;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JTabbedPane oMainTabPane;
  private javax.swing.JTable oUserTable;
  private javax.swing.JPanel oUsersPanel;
  private javax.swing.JScrollPane oUsersTabScrollTab;
  private javax.swing.JSpinner spnAirdropAmount;
  private javax.swing.JSpinner spnPage;
  private javax.swing.JTextField txtName;
  // End of variables declaration//GEN-END:variables
}
