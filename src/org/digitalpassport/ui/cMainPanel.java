package org.digitalpassport.ui;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.digitalpassport.OSTKitAlpha;
import static org.digitalpassport.api.IConstants.g_sPARAM_AIRDROP_ALOC_DONE;
import static org.digitalpassport.api.IConstants.g_sPARAM_AIRDROP_CONTRACT_APPORVED;
import static org.digitalpassport.api.IConstants.g_sPARAM_AIRDROP_TOKENS_TRANSFERED;
import static org.digitalpassport.api.IConstants.g_sPARAM_AIRDROP_USERS_IDENTIFIED;
import org.digitalpassport.api.commands.cTransactionManagement;
import org.digitalpassport.api.commands.cUserManagement;
import org.digitalpassport.deserialize.json.cData;
import org.digitalpassport.deserialize.json.cError;
import org.digitalpassport.deserialize.json.cErrorData;
import org.digitalpassport.deserialize.json.cResponse;
import org.digitalpassport.deserialize.json.users.lists.cEconomyUser;
import org.digitalpassport.serialization.cSerializationFactory;

/**
 *
 * @author Philip M. Trenwith
 */
public class cMainPanel extends javax.swing.JPanel
{

  private cSerializationFactory m_oSerializationFactory = new cSerializationFactory();
  private cAirdropList m_oAirdrops = new cAirdropList();
  private File fAirdrops;
  private cUserManagement m_oUserManagement = new cUserManagement();
  private cTransactionManagement m_oTransactionManagement = new cTransactionManagement();
  private int m_iMaxPageNumber = 2;
  private cUserTableModel m_oUserTableModel;

  class cUserTableModel extends DefaultTableModel
  {

    public cUserTableModel()
    {
      super();
    }

    @Override
    public boolean isCellEditable(int row, int column)
    {
      return getColumnName(column).equals("Name");
    }
  }

  /**
   * Creates new form cMainPanel
   */
  public cMainPanel()
  {
    initComponents();
    spnPage.setValue(1);
    spnPage.addChangeListener(new ChangeListener()
    {
      @Override
      public void stateChanged(ChangeEvent e)
      {
        try
        {
          int iPage = Integer.parseInt(spnPage.getValue() + "");
          loadUsers();
        }
        catch (Exception ex)
        {
          System.err.println("Invalid page: " + ex.getMessage());
        }
      }
    });

    fAirdrops = new File("airdrops.ser");
    if (fAirdrops.exists())
    {
      m_oAirdrops = (cAirdropList) m_oSerializationFactory.deserialize(fAirdrops, false);
      ArrayList<String> lsPreviousAirdrops = m_oAirdrops.getlsAirdropUUIDs();
      for (String sAirdrop : lsPreviousAirdrops)
      {
        System.out.println("Previous airdrop: " + sAirdrop);
      }
    }

    spnAirdropAmount.setModel(new SpinnerNumberModel(10, 1, Integer.MAX_VALUE, 1));

    m_oUserTableModel = new cUserTableModel();
    TableModel model = tblUsers.getModel();
    int iColumnCount = model.getColumnCount();
    for (int i = 0; i < iColumnCount; i++)
    {
      m_oUserTableModel.addColumn(model.getColumnName(i));
    }
    tblUsers.setModel(m_oUserTableModel);

    tblUsers.addPropertyChangeListener(new PropertyChangeListener()
    {
      @Override
      public void propertyChange(PropertyChangeEvent evt)
      {
        if ("tableCellEditor".equals(evt.getPropertyName()))
        {
          if (evt.getNewValue() == null)
          {
            int iRow = tblUsers.getSelectedRow();
            int iCol = tblUsers.getSelectedColumn();
            int iUUIDIndex = getColumnIndexByHeading("UUID");
            String sUUID = tblUsers.getValueAt(iRow, iUUIDIndex) + "";
            String sNewName = tblUsers.getValueAt(iRow, iCol) + "";
            System.out.println("User name changed: " + sUUID + " -> " + sNewName);
            cResponse oResponse = m_oUserManagement.editUser(sUUID, sNewName);

            if (oResponse != null && !oResponse.getsuccess())
            {
              JOptionPane.showMessageDialog(tblUsers, "Failed to edit user with UUID: "
                      + sUUID + "\nCode: " + oResponse.geterr().getcode()
                      + "\nMessage: " + oResponse.geterr().getmsg());
            }
          }
        }
      }
    });
  }

  public void terminate()
  {
    m_oSerializationFactory.serialize(m_oAirdrops, fAirdrops, false);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    oMainTabPane = new javax.swing.JTabbedPane();
    oUsersTabScrollTab = new javax.swing.JScrollPane();
    oUsersPanel = new javax.swing.JPanel();
    jLabel3 = new javax.swing.JLabel();
    cmbFilter = new javax.swing.JComboBox<>();
    jLabel2 = new javax.swing.JLabel();
    cmbOrderBy = new javax.swing.JComboBox<>();
    cmbOrder = new javax.swing.JComboBox<>();
    jLabel1 = new javax.swing.JLabel();
    spnPage = new javax.swing.JSpinner();
    btnListUsers = new javax.swing.JButton();
    jScrollPane2 = new javax.swing.JScrollPane();
    tblUsers = new javax.swing.JTable();
    jLabel4 = new javax.swing.JLabel();
    txtName = new javax.swing.JTextField();
    btnCreateUser = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    pnlTransactions = new javax.swing.JPanel();
    btnListTransactions = new javax.swing.JButton();
    pnlAirdrops = new javax.swing.JPanel();
    lblAirdropToUsers = new javax.swing.JLabel();
    cmbAirdropTo = new javax.swing.JComboBox<>();
    lblAirdropAmount = new javax.swing.JLabel();
    spnAirdropAmount = new javax.swing.JSpinner();
    btnAirdrop = new javax.swing.JButton();
    lblAirdropUUIDs = new javax.swing.JLabel();
    cmbAirdrops = new javax.swing.JComboBox<>();
    btnAirdropStatus = new javax.swing.JButton();
    jScrollPane4 = new javax.swing.JScrollPane();
    tblAirdropStepsCompleted = new javax.swing.JTable();
    lblAirdropStatus = new javax.swing.JLabel();

    jLabel3.setText("Filter:");

    cmbFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "all", "never_airdropped" }));
    cmbFilter.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cmbFilterActionPerformed(evt);
      }
    });

    jLabel2.setText("Order By:");

    cmbOrderBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "name", "creation_time" }));
    cmbOrderBy.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cmbOrderByActionPerformed(evt);
      }
    });

    cmbOrder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "asc", "desc" }));
    cmbOrder.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cmbOrderActionPerformed(evt);
      }
    });

    jLabel1.setText("Page:");

    btnListUsers.setText("Get Users");
    btnListUsers.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btnListUsersActionPerformed(evt);
      }
    });

    tblUsers.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Name", "Tokens", "Airdropped Tokens", "UUID"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    jScrollPane2.setViewportView(tblUsers);

    jLabel4.setText("Name:");

    btnCreateUser.setText("Create User");
    btnCreateUser.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btnCreateUserActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout oUsersPanelLayout = new javax.swing.GroupLayout(oUsersPanel);
    oUsersPanel.setLayout(oUsersPanelLayout);
    oUsersPanelLayout.setHorizontalGroup(
      oUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(oUsersPanelLayout.createSequentialGroup()
        .addGroup(oUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane2)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, oUsersPanelLayout.createSequentialGroup()
            .addGap(0, 156, Short.MAX_VALUE)
            .addComponent(jLabel3)
            .addGap(18, 18, 18)
            .addComponent(cmbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(10, 10, 10)
            .addComponent(jLabel2)
            .addGap(18, 18, 18)
            .addComponent(cmbOrderBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(6, 6, 6)
            .addComponent(cmbOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jLabel1)
            .addGap(18, 18, 18)
            .addComponent(spnPage, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(btnListUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, oUsersPanelLayout.createSequentialGroup()
            .addComponent(jLabel4)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(txtName)
            .addGap(18, 18, 18)
            .addComponent(btnCreateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap())
    );
    oUsersPanelLayout.setVerticalGroup(
      oUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(oUsersPanelLayout.createSequentialGroup()
        .addGap(11, 11, 11)
        .addGroup(oUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(oUsersPanelLayout.createSequentialGroup()
            .addGap(4, 4, 4)
            .addComponent(jLabel3))
          .addGroup(oUsersPanelLayout.createSequentialGroup()
            .addGap(1, 1, 1)
            .addComponent(cmbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(oUsersPanelLayout.createSequentialGroup()
            .addGap(4, 4, 4)
            .addComponent(jLabel2))
          .addGroup(oUsersPanelLayout.createSequentialGroup()
            .addGap(1, 1, 1)
            .addComponent(cmbOrderBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(oUsersPanelLayout.createSequentialGroup()
            .addGap(1, 1, 1)
            .addComponent(cmbOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(oUsersPanelLayout.createSequentialGroup()
            .addGap(4, 4, 4)
            .addComponent(jLabel1))
          .addGroup(oUsersPanelLayout.createSequentialGroup()
            .addGap(1, 1, 1)
            .addComponent(spnPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(btnListUsers))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(oUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnCreateUser)
          .addComponent(jLabel4))
        .addContainerGap())
    );

    oUsersTabScrollTab.setViewportView(oUsersPanel);

    oMainTabPane.addTab("Users", oUsersTabScrollTab);

    btnListTransactions.setText("List Transactions");
    btnListTransactions.setToolTipText("");
    btnListTransactions.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btnListTransactionsActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout pnlTransactionsLayout = new javax.swing.GroupLayout(pnlTransactions);
    pnlTransactions.setLayout(pnlTransactionsLayout);
    pnlTransactionsLayout.setHorizontalGroup(
      pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTransactionsLayout.createSequentialGroup()
        .addContainerGap(666, Short.MAX_VALUE)
        .addComponent(btnListTransactions)
        .addContainerGap())
    );
    pnlTransactionsLayout.setVerticalGroup(
      pnlTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(pnlTransactionsLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(btnListTransactions)
        .addContainerGap(494, Short.MAX_VALUE))
    );

    jScrollPane1.setViewportView(pnlTransactions);

    oMainTabPane.addTab("Transactions", jScrollPane1);

    lblAirdropToUsers.setText("Airdrop tokens to users:");

    cmbAirdropTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "all", "never airdropped" }));

    lblAirdropAmount.setText("Amount:");

    btnAirdrop.setText("Airdrop");
    btnAirdrop.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btnAirdropActionPerformed(evt);
      }
    });

    lblAirdropUUIDs.setText("Previous Airdrops:");
    lblAirdropUUIDs.setToolTipText("");

    btnAirdropStatus.setText("Status");
    btnAirdropStatus.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btnAirdropStatusActionPerformed(evt);
      }
    });

    tblAirdropStepsCompleted.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {
        {null, null, null, null}
      },
      new String []
      {
        "Users Identified", "Tokens Transfered", "Contract Approved", "Allocation Done"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    tblAirdropStepsCompleted.setRowSelectionAllowed(false);
    tblAirdropStepsCompleted.getTableHeader().setReorderingAllowed(false);
    jScrollPane4.setViewportView(tblAirdropStepsCompleted);

    lblAirdropStatus.setText("Status:");

    javax.swing.GroupLayout pnlAirdropsLayout = new javax.swing.GroupLayout(pnlAirdrops);
    pnlAirdrops.setLayout(pnlAirdropsLayout);
    pnlAirdropsLayout.setHorizontalGroup(
      pnlAirdropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(pnlAirdropsLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(pnlAirdropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(pnlAirdropsLayout.createSequentialGroup()
            .addGroup(pnlAirdropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
              .addComponent(lblAirdropUUIDs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(lblAirdropToUsers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(pnlAirdropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(cmbAirdropTo, 0, 389, Short.MAX_VALUE)
              .addComponent(cmbAirdrops, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(lblAirdropAmount)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(spnAirdropAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(pnlAirdropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(btnAirdropStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(btnAirdrop, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
            .addGap(11, 11, 11))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAirdropsLayout.createSequentialGroup()
            .addGroup(pnlAirdropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(lblAirdropStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jScrollPane4))
            .addContainerGap())))
    );
    pnlAirdropsLayout.setVerticalGroup(
      pnlAirdropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(pnlAirdropsLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(pnlAirdropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(lblAirdropToUsers)
          .addComponent(cmbAirdropTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnAirdrop)
          .addComponent(spnAirdropAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lblAirdropAmount))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(pnlAirdropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(lblAirdropUUIDs)
          .addComponent(cmbAirdrops, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnAirdropStatus))
        .addGap(15, 15, 15)
        .addComponent(lblAirdropStatus)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(334, Short.MAX_VALUE))
    );

    lblAirdropUUIDs.getAccessibleContext().setAccessibleName("Previous Airdrops:");

    oMainTabPane.addTab("Airdrops", pnlAirdrops);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(oMainTabPane)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(oMainTabPane)
    );
  }// </editor-fold>//GEN-END:initComponents

    private void cmbFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFilterActionPerformed
      spnPage.setValue(1);
    }//GEN-LAST:event_cmbFilterActionPerformed

    private void cmbOrderByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrderByActionPerformed
      spnPage.setValue(1);
    }//GEN-LAST:event_cmbOrderByActionPerformed

    private void cmbOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrderActionPerformed
      spnPage.setValue(1);
    }//GEN-LAST:event_cmbOrderActionPerformed

    private void btnListUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListUsersActionPerformed
      loadUsers();
    }//GEN-LAST:event_btnListUsersActionPerformed

    private void btnCreateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateUserActionPerformed
      btnCreateUser.setText("Please wait...");
      btnCreateUser.setEnabled(false);
      new Thread(new Runnable()
      {
        @Override
        public void run()
        {
          cResponse oResponse = m_oUserManagement.createUser(txtName.getText());

          if (oResponse != null && !oResponse.getsuccess())
          {
            String sErrorMsg = "";
            cError oError = oResponse.geterr();
            if (oError != null)
            {
              cErrorData[] error_data = oError.geterror_data();
              if (error_data != null)
              {
                for (cErrorData oErr : error_data)
                {
                  sErrorMsg += oErr.getname() + "\n";
                }
              }
              showError(oResponse.geterr(), "Failed to create user: " + sErrorMsg);
            }
            else
            {
              showError(oResponse.geterr(), "Failed to create user");
            }
          }
          else
          {
            loadUsers();
          }

          btnCreateUser.setText("Get Users");
          btnCreateUser.setEnabled(true);
        }
      }).start();
    }//GEN-LAST:event_btnCreateUserActionPerformed

  private void btnAirdropActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAirdropActionPerformed
  {//GEN-HEADEREND:event_btnAirdropActionPerformed
    new Thread(new Runnable()
    {
      @Override
      public void run()
      {
        String sAirdropTo = (cmbAirdropTo.getSelectedItem() + "").replace(" ", "_");
        cResponse oResponse = m_oUserManagement.sendAirdropTo(sAirdropTo, Integer.parseInt(spnAirdropAmount.getValue() + ""));
        if (oResponse.getsuccess())
        {
          String sAirdrop_uuid = oResponse.getdata().getairdrop_uuid();
          m_oAirdrops.addAirdropUuid(sAirdrop_uuid);
          loadUsers();
        }
        else
        {
          showError(oResponse.geterr(), "Failed to retrieve users");
        }
      }
    }).start();
  }//GEN-LAST:event_btnAirdropActionPerformed

  private void btnListTransactionsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnListTransactionsActionPerformed
  {//GEN-HEADEREND:event_btnListTransactionsActionPerformed
    btnListTransactions.setText("Please wait...");
    btnListTransactions.setEnabled(false);
    new Thread(new Runnable()
    {
      @Override
      public void run()
      {
        cResponse oResponse = m_oTransactionManagement.listTransactions();
        if (oResponse.getsuccess())
        {
          System.out.println(oResponse.getdata().toString());
        }
        btnListTransactions.setText("List Transactions");
        btnListTransactions.setEnabled(true);
      }
    }).start();
  }//GEN-LAST:event_btnListTransactionsActionPerformed

  private void btnAirdropStatusActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAirdropStatusActionPerformed
  {//GEN-HEADEREND:event_btnAirdropStatusActionPerformed
    new Thread(new Runnable()
    {
      @Override
      public void run()
      {
        String sAirdropUUID = cmbAirdrops.getSelectedItem()+"";
        if (sAirdropUUID != null)
        {
          cResponse oResponse = m_oUserManagement.airdropStatus(sAirdropUUID);
          if (oResponse.getsuccess())
          {
            String airdrop_uuid = oResponse.getdata().getairdrop_uuid();
            String current_status = oResponse.getdata().getcurrent_status();
            String[] steps_complete = oResponse.getdata().getsteps_complete();
            
            lblAirdropStatus.setText("Status: " + current_status);
            
            tblAirdropStepsCompleted.setValueAt("NO", 0, 0);
            tblAirdropStepsCompleted.setValueAt("NO", 0, 1);
            tblAirdropStepsCompleted.setValueAt("NO", 0, 2);
            tblAirdropStepsCompleted.setValueAt("NO", 0, 3);
            for (String step: steps_complete)
            {
              if (step.equals(g_sPARAM_AIRDROP_USERS_IDENTIFIED))
              {
                tblAirdropStepsCompleted.setValueAt("YES", 0, 0);
              }
              else if (step.equals(g_sPARAM_AIRDROP_TOKENS_TRANSFERED))
              {
                tblAirdropStepsCompleted.setValueAt("YES", 0, 1);
              }
              else if (step.equals(g_sPARAM_AIRDROP_CONTRACT_APPORVED))
              {
                tblAirdropStepsCompleted.setValueAt("YES", 0, 2);
              }
              else if (step.equals(g_sPARAM_AIRDROP_ALOC_DONE))
              {
                tblAirdropStepsCompleted.setValueAt("YES", 0, 3);
              }
            }
          }
        }
      }
    }).start();
        
  }//GEN-LAST:event_btnAirdropStatusActionPerformed

  public void loadUsers()
  {
    btnListUsers.setText("Please wait...");
    btnListUsers.setEnabled(false);
    new Thread(new Runnable()
    {
      @Override
      public void run()
      {
        clearUsersTable();

        String sOrderBy = cmbOrderBy.getSelectedItem() + "";
        String sOrder = cmbOrder.getSelectedItem() + "";
        String sFilter = cmbFilter.getSelectedItem() + "";
        String sPage = spnPage.getValue() + "";

        cResponse oResponse = m_oUserManagement.listUsers(sPage, sFilter, sOrderBy, sOrder);

        if (oResponse.getsuccess())
        {
          cData oUserData = oResponse.getdata();
          cEconomyUser[] lsUsers = oUserData.geteconomy_users();

          String sPage_no = oUserData.getmeta().getoNextPagePayload().getPage_no();
          if (sPage_no != null)
          {
            int iPage = Integer.parseInt(sPage);
            int iNextPage = Integer.parseInt(sPage_no);
            if (iNextPage > m_iMaxPageNumber)
            {
              m_iMaxPageNumber = iNextPage;
              spnPage.setModel(new SpinnerNumberModel(iPage, 1, m_iMaxPageNumber, 1));
            }
          }

          DefaultTableModel oUserModel = (DefaultTableModel) tblUsers.getModel();
          for (cEconomyUser oUser : lsUsers)
          {
            Vector<Object> vRow = new Vector<Object>();
            int iRowNumber = oUserModel.getRowCount();
            oUserModel.addRow(vRow);

            oUserModel.setValueAt(oUser.getName(), iRowNumber, getColumnIndexByHeading("Name"));
            oUserModel.setValueAt(oUser.getToken_balance(), iRowNumber, getColumnIndexByHeading("Tokens"));
            oUserModel.setValueAt(oUser.getTotal_airdropped_tokens(), iRowNumber, getColumnIndexByHeading("Airdropped Tokens"));
            oUserModel.setValueAt(oUser.getUuid(), iRowNumber, getColumnIndexByHeading("UUID"));
          }
        }
        else
        {
          showError(oResponse.geterr(), "Failed to retrieve users");
        }
        btnListUsers.setText("Get Users");
        btnListUsers.setEnabled(true);
      }
    }).start();
  }

  public void clearUsersTable()
  {
    DefaultTableModel dm = (DefaultTableModel) tblUsers.getModel();
    int rowCount = dm.getRowCount();
    //Remove rows one by one from the end of the table
    for (int i = rowCount - 1; i >= 0; i--)
    {
      dm.removeRow(i);
    }
    tblUsers.repaint();
  }

  public int getColumnIndexByHeading(String _sColumnHeading)
  {
    DefaultTableModel oUserModel = (DefaultTableModel) tblUsers.getModel();
    for (int iCol = 0; iCol < oUserModel.getColumnCount(); iCol++)
    {
      if (oUserModel.getColumnName(iCol).equals(_sColumnHeading))
      {
        return iCol;
      }
    }
    return -1;
  }

  private void showError(cError oError, String sMessage)
  {
    JOptionPane.showMessageDialog(OSTKitAlpha.oFrame, sMessage
            + "\nCode: " + oError.getcode()
            + "\nMessage: " + oError.getmsg());
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnAirdrop;
  private javax.swing.JButton btnAirdropStatus;
  private javax.swing.JButton btnCreateUser;
  private javax.swing.JButton btnListTransactions;
  private javax.swing.JButton btnListUsers;
  private javax.swing.JComboBox<String> cmbAirdropTo;
  private javax.swing.JComboBox<String> cmbAirdrops;
  private javax.swing.JComboBox<String> cmbFilter;
  private javax.swing.JComboBox<String> cmbOrder;
  private javax.swing.JComboBox<String> cmbOrderBy;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JLabel lblAirdropAmount;
  private javax.swing.JLabel lblAirdropStatus;
  private javax.swing.JLabel lblAirdropToUsers;
  private javax.swing.JLabel lblAirdropUUIDs;
  private javax.swing.JTabbedPane oMainTabPane;
  private javax.swing.JPanel oUsersPanel;
  private javax.swing.JScrollPane oUsersTabScrollTab;
  private javax.swing.JPanel pnlAirdrops;
  private javax.swing.JPanel pnlTransactions;
  private javax.swing.JSpinner spnAirdropAmount;
  private javax.swing.JSpinner spnPage;
  private javax.swing.JTable tblAirdropStepsCompleted;
  private javax.swing.JTable tblUsers;
  private javax.swing.JTextField txtName;
  // End of variables declaration//GEN-END:variables
}
