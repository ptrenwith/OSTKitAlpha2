
package org.digitalpassport.ui;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.digitalpassport.api.commands.cTransactionManagement;
import org.digitalpassport.api.commands.cUserManagement;
import org.digitalpassport.deserialize.json.cError;
import org.digitalpassport.deserialize.json.cErrorData;
import org.digitalpassport.deserialize.json.cResponse;
import org.digitalpassport.deserialize.json.users.lists.cEconomyUserJson;
import org.digitalpassport.deserialize.json.users.lists.cListUsersJson;


/**
 *
 * @author Philip M. Trenwith
 */
public class cMainUI extends javax.swing.JPanel
{
  private cUserManagement m_oUserManagement = new cUserManagement();
  private cTransactionManagement m_oTransactionManagement = new cTransactionManagement();
  private int m_iMaxPageNumber = 2;
  private cTableModel m_oTableModel;
  
  class cTableModel extends DefaultTableModel
  {

    public cTableModel()
    {
      super();
    }

    @Override
    public boolean isCellEditable(int row, int column)
    {
      return getColumnName(column).equals("Name");
    }
  }
  
  /**
   * Creates new form cMainUI
   */
  public cMainUI()
  {
    initComponents();
    
    spnPage.setModel(new SpinnerNumberModel(1, 1, m_iMaxPageNumber, 1));
    spnPage.setValue(1);
    spnPage.addChangeListener(new ChangeListener() 
    {
        @Override
        public void stateChanged(ChangeEvent e) 
        {
          loadUsers();
        }
    });
    
    m_oTableModel = new cTableModel();
    TableModel model = oUserTable.getModel();
    int iColumnCount = model.getColumnCount();
    for (int i=0; i<iColumnCount; i++)
    {
      m_oTableModel.addColumn(model.getColumnName(i));
    }
    oUserTable.setModel(m_oTableModel);
    
    oUserTable.addPropertyChangeListener(new PropertyChangeListener() 
    {
      @Override
      public void propertyChange(PropertyChangeEvent evt) {
          if ("tableCellEditor".equals(evt.getPropertyName())) 
          {
            if (evt.getNewValue() == null)
            {
              int iRow = oUserTable.getSelectedRow();
              int iCol = oUserTable.getSelectedColumn();
              int iUUIDIndex = getColumnIndexByHeading("UUID");
              String sUUID = oUserTable.getValueAt(iRow, iUUIDIndex)+"";
              String sNewName = oUserTable.getValueAt(iRow, iCol)+"";
              System.out.println("User name changed: " + sUUID + " -> " + sNewName);
              cResponse oResponse = m_oUserManagement.editUser(sUUID, sNewName);
              
              if (oResponse != null && !oResponse.getsuccess())
              {
                JOptionPane.showMessageDialog(oUserTable, "Failed to edit user with UUID: " + 
                        sUUID + "\nCode: " + oResponse.geterr().getcode() + 
                        "\nMessage: " + oResponse.geterr().getmsg());
              }
            }
          }
      }
    });
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jTabbedPane1 = new javax.swing.JTabbedPane();
    jPanel3 = new javax.swing.JPanel();
    jTabbedPane2 = new javax.swing.JTabbedPane();
    jPanel2 = new javax.swing.JPanel();
    jPanel1 = new javax.swing.JPanel();
    btnListUsers = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    oUserTable = new javax.swing.JTable();
    spnPage = new javax.swing.JSpinner();
    jLabel1 = new javax.swing.JLabel();
    cmbOrder = new javax.swing.JComboBox<>();
    cmbOrderBy = new javax.swing.JComboBox<>();
    jLabel2 = new javax.swing.JLabel();
    cmbFilter = new javax.swing.JComboBox<>();
    jLabel3 = new javax.swing.JLabel();
    jPanel4 = new javax.swing.JPanel();
    jLabel4 = new javax.swing.JLabel();
    txtName = new javax.swing.JTextField();
    btnCreateUser = new javax.swing.JButton();

    btnListUsers.setText("Get Users");
    btnListUsers.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btnListUsersActionPerformed(evt);
      }
    });

    oUserTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Name", "Tokens", "Airdropped Tokens", "UUID"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, false, false, false
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    jScrollPane1.setViewportView(oUserTable);

    jLabel1.setText("Page:");

    cmbOrder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "asc", "desc" }));
    cmbOrder.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cmbOrderActionPerformed(evt);
      }
    });

    cmbOrderBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "name", "creation_time" }));
    cmbOrderBy.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cmbOrderByActionPerformed(evt);
      }
    });

    jLabel2.setText("Order By:");

    cmbFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "all", "never_airdropped" }));
    cmbFilter.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cmbFilterActionPerformed(evt);
      }
    });

    jLabel3.setText("Filter:");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jLabel3)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(cmbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jLabel2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(cmbOrderBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(cmbOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(spnPage, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(btnListUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
      .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(btnListUsers)
          .addComponent(spnPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel1)
          .addComponent(cmbOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(cmbOrderBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel2)
          .addComponent(cmbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel3))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 817, Short.MAX_VALUE)
      .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 426, Short.MAX_VALUE)
      .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
          .addContainerGap()
          .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
    );

    jTabbedPane2.addTab("Existing Users", jPanel2);

    jLabel4.setText("Name:");

    btnCreateUser.setText("Create User");
    btnCreateUser.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btnCreateUserActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
      jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel4Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(btnCreateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
    jPanel4Layout.setVerticalGroup(
      jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel4Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel4)
          .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnCreateUser))
        .addContainerGap(390, Short.MAX_VALUE))
    );

    jTabbedPane2.addTab("New Users", jPanel4);

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jTabbedPane2)
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jTabbedPane2)
    );

    jTabbedPane2.getAccessibleContext().setAccessibleName("Existing Users");

    jTabbedPane1.addTab("Users", jPanel3);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 827, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jTabbedPane1)
    );

    jTabbedPane1.getAccessibleContext().setAccessibleName("Users");
  }// </editor-fold>//GEN-END:initComponents

  private void btnListUsersActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnListUsersActionPerformed
  {//GEN-HEADEREND:event_btnListUsersActionPerformed
    loadUsers();
  }//GEN-LAST:event_btnListUsersActionPerformed

  private void cmbFilterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbFilterActionPerformed
  {//GEN-HEADEREND:event_cmbFilterActionPerformed
    spnPage.setValue(1);
  }//GEN-LAST:event_cmbFilterActionPerformed

  private void cmbOrderByActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbOrderByActionPerformed
  {//GEN-HEADEREND:event_cmbOrderByActionPerformed
    spnPage.setValue(1);
  }//GEN-LAST:event_cmbOrderByActionPerformed

  private void cmbOrderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbOrderActionPerformed
  {//GEN-HEADEREND:event_cmbOrderActionPerformed
    spnPage.setValue(1);
  }//GEN-LAST:event_cmbOrderActionPerformed

  private void btnCreateUserActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCreateUserActionPerformed
  {//GEN-HEADEREND:event_btnCreateUserActionPerformed
    btnCreateUser.setText("Please wait...");
    btnCreateUser.setEnabled(false);
    new Thread(new Runnable() 
    {
      @Override
      public void run()
      {
        cResponse oResponse = m_oUserManagement.createUser(txtName.getText());
              
        if (oResponse != null && !oResponse.getsuccess())
        {
          String sErrorMsg = "";
          cError oError = oResponse.geterr();
          if (oError != null)
          {
            cErrorData[] error_data = oError.geterror_data();
            if (error_data != null)
            {
              for (cErrorData oErr: error_data)
              {
                sErrorMsg += oErr.getname() + "\n";
              }
            }
            showError(oResponse.geterr(), "Failed to create user: " + sErrorMsg);
          }
          else
          {
            showError(oResponse.geterr(), "Failed to create user");
          }
        }
        else
        {
          loadUsers();
        }
        
        btnCreateUser.setText("Get Users");
        btnCreateUser.setEnabled(true);
      }
    }).start();
  }//GEN-LAST:event_btnCreateUserActionPerformed

  public void loadUsers()
  {
    btnListUsers.setText("Please wait...");
    btnListUsers.setEnabled(false);
    new Thread(new Runnable() 
    {
      @Override
      public void run()
      {
        clearUsersTable();
        
        String sOrderBy = cmbOrderBy.getSelectedItem()+"";
        String sOrder = cmbOrder.getSelectedItem()+"";
        String sFilter = cmbFilter.getSelectedItem()+"";
        String sPage = spnPage.getValue()+"";
        
        cResponse oResponse = m_oUserManagement.listUsers(sPage, sFilter, sOrderBy, sOrder);
        
        if (oResponse.getsuccess())
        {
          cListUsersJson oUserData = oResponse.getdata();
          cEconomyUserJson[] lsUsers = oUserData.geteconomy_users();

          String sPage_no = oUserData.getmeta().getoNextPagePayload().getPage_no();
          if (sPage_no != null)
          {
            int iPage = Integer.parseInt(sPage);
            int iNextPage = Integer.parseInt(sPage_no);
            if (iNextPage > m_iMaxPageNumber)
            {
              m_iMaxPageNumber = iNextPage;
              spnPage.setModel(new SpinnerNumberModel(iPage, 1, m_iMaxPageNumber, 1));
            }
          }

          DefaultTableModel oUserModel = (DefaultTableModel) oUserTable.getModel();
          for (cEconomyUserJson oUser: lsUsers)
          {
            Vector<Object> vRow = new Vector<Object>();
            int iRowNumber = oUserModel.getRowCount();
            oUserModel.addRow(vRow);         

            oUserModel.setValueAt(oUser.getName(), iRowNumber, getColumnIndexByHeading("Name"));
            oUserModel.setValueAt(oUser.getToken_balance(), iRowNumber, getColumnIndexByHeading("Tokens"));
            oUserModel.setValueAt(oUser.getTotal_airdropped_tokens(), iRowNumber, getColumnIndexByHeading("Airdropped Tokens"));
            oUserModel.setValueAt(oUser.getUuid(), iRowNumber, getColumnIndexByHeading("UUID"));
          }
        }
        else
        {
          showError(oResponse.geterr(), "Failed to retrieve users");
        }
        btnListUsers.setText("Get Users");
        btnListUsers.setEnabled(true);
      }
    }).start();
  }
  
  public void clearUsersTable()
  {
    DefaultTableModel dm = (DefaultTableModel) oUserTable.getModel();
    int rowCount = dm.getRowCount();
    //Remove rows one by one from the end of the table
    for (int i = rowCount - 1; i >= 0; i--) 
    {
      dm.removeRow(i);
    }
    oUserTable.repaint();
  }
  
  public int getColumnIndexByHeading(String _sColumnHeading)
  {
    DefaultTableModel oUserModel = (DefaultTableModel) oUserTable.getModel();
    for (int iCol = 0; iCol < oUserModel.getColumnCount(); iCol++)
    {
      if (oUserModel.getColumnName(iCol).equals(_sColumnHeading))
      {
        return iCol;
      }
    }
    return -1;
  }
  
  private void showError(cError oError, String sMessage)
  {
    JOptionPane.showMessageDialog(oUserTable, sMessage +  
                  "\nCode: " + oError.getcode() + 
                  "\nMessage: " + oError.getmsg());
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnCreateUser;
  private javax.swing.JButton btnListUsers;
  private javax.swing.JComboBox<String> cmbFilter;
  private javax.swing.JComboBox<String> cmbOrder;
  private javax.swing.JComboBox<String> cmbOrderBy;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTabbedPane jTabbedPane1;
  private javax.swing.JTabbedPane jTabbedPane2;
  private javax.swing.JTable oUserTable;
  private javax.swing.JSpinner spnPage;
  private javax.swing.JTextField txtName;
  // End of variables declaration//GEN-END:variables
}
